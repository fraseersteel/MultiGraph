{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue109;\red15\green112\blue3;\red82\green0\blue103;
\red192\green237\blue254;\red0\green0\blue254;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c42745;\csgenericrgb\c5882\c43922\c1176;\csgenericrgb\c32157\c0\c40392;
\csgenericrgb\c75294\c92941\c99608;\csgenericrgb\c0\c0\c99608;}
\paperw11900\paperh16840\margl1440\margr1440\vieww25400\viewh13520\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b\fs24 \cf2 public 
\f1\b0 \cf0 List<? 
\f0\b \cf2 extends 
\f1\b0 \cf0 IEdge> getRoute(INode start, INode target) \{\
    
\f0\b \cf2 if 
\f1\b0 \cf0 (start == 
\f0\b \cf2 null 
\f1\b0 \cf0 || target == 
\f0\b \cf2 null
\f1\b0 \cf0 ) \{\
        
\f0\b \cf2 throw new 
\f1\b0 \cf0 IllegalArgumentException(
\f0\b \cf3 "null values are not considered to be Nodes."
\f1\b0 \cf0 );\
    \}\
\
    
\f0\b \cf2 if 
\f1\b0 \cf0 (!
\f0\b \cf4 nodeMap
\f1\b0 \cf0 .containsKey(start.getId()) || !
\f0\b \cf4 nodeMap
\f1\b0 \cf0 .containsKey(target.getId())) \{\
        
\f0\b \cf2 return new 
\f1\b0 \cf0 ArrayList<>();\
    \}\
\
    Collection<IEdge> edgeCheck = 
\f0\b \cf2 null
\f1\b0 \cf0 ;\
    
\f0\b \cf2 \cb5 assert 
\f1\b0 \cf0 (edgeCheck = 
\f0\b \cf2 new 
\f1\b0 \cf0 ArrayList<>()) != 
\f0\b \cf2 null 
\f1\b0 \cf0 : 
\f0\b \cf3 "edgeCheck declaration"
\f1\b0 \cf0 ;\
    
\f0\b \cf2 assert 
\f1\b0 \cf0 (edgeCheck.addAll(
\f0\b \cf4 edgeList
\f1\b0 \cf0 )) : 
\f0\b \cf3 "adding all elements to edgeCheck"
\f1\b0 \cf0 ;\
\cb1 \
    Collection<INode> nodeCheck = 
\f0\b \cf2 null
\f1\b0 \cf0 ;\
    
\f0\b \cf2 \cb5 assert 
\f1\b0 \cf0 (nodeCheck = 
\f0\b \cf2 new 
\f1\b0 \cf0 ArrayList<>()) != 
\f0\b \cf2 null 
\f1\b0 \cf0 : 
\f0\b \cf3 "nodeCheck declaration"
\f1\b0 \cf0 ;\
    
\f0\b \cf2 assert 
\f1\b0 \cf0 (nodeCheck.addAll(
\f0\b \cf4 nodeMap
\f1\b0 \cf0 .values())) : 
\f0\b \cf3 "adding all elements to nodeCheck"
\f1\b0 \cf0 ;\cb1 \
\
    INode destination = target;\
\
    List<INode> visited = 
\f0\b \cf2 new 
\f1\b0 \cf0 ArrayList<>();\
    LinkedList<INode> queue = 
\f0\b \cf2 new 
\f1\b0 \cf0 LinkedList<>();\
\
    HashMap<Integer, ParentNodeRecord> parents = 
\f0\b \cf2 new 
\f1\b0 \cf0 HashMap<>();\
\
    visited.add(start);\
    queue.add(start);\
    
\f0\b \cf2 while 
\f1\b0 \cf0 (!queue.isEmpty()) \{\
        INode curNodeToCheck = queue.poll();\
\
        
\f0\b \cf2 if 
\f1\b0 \cf0 (curNodeToCheck.getId() == target.getId()) \{\
            
\f0\b \cf2 break
\f1\b0 \cf0 ;\
        \}\
\
        List<? 
\f0\b \cf2 extends 
\f1\b0 \cf0 IEdge> successors = successors(curNodeToCheck);\
\
        
\f0\b \cf2 for 
\f1\b0 \cf0 (IEdge i : successors) \{\
           \cb5  
\f0\b \cf2 assert
\f1\b0 \cf0 (
\f0\b \cf4 edgeList
\f1\b0 \cf0 .contains(i)) : 
\f0\b \cf3 "i" 
\f1\b0 \cf0 + i.getNode1().getName()+ 
\f0\b \cf3 "-" 
\f1\b0 \cf0 + i.getLabel() + 
\f0\b \cf3 "-" 
\f1\b0 \cf0 + i.getNode2().getName() + 
\f0\b \cf3 " is not in the graph"
\f1\b0 \cf0 ;\
\cb1             INode connectingNode = i.getOtherNode(curNodeToCheck.getId());\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (!visited.contains(connectingNode)) \{\
                queue.add(connectingNode);\
                visited.add(connectingNode);               \
                
\f0\b \cf2 if 
\f1\b0 \cf0 (!parents.containsKey(connectingNode.getId())) \{\
                    parents.put(connectingNode.getId(), 
\f0\b \cf2 new 
\f1\b0 \cf0 ParentNodeRecord(curNodeToCheck, i));\
                \}\
            \}\
        \}\
    \}\
\
    List<IEdge> edgeSequence = 
\f0\b \cf2 new 
\f1\b0 \cf0 ArrayList<>();\
\
    
\f0\b \cf2 while 
\f1\b0 \cf0 (start.getId() != destination.getId()) \{\
        ParentNodeRecord curDestinationRecord = parents.get(destination.getId());\
        edgeSequence.add(\cf6 0\cf0 , curDestinationRecord.getEdge());\
        destination = curDestinationRecord.getParent();\
    \}\
\
\cb5     
\f0\b \cf2 assert 
\f1\b0 \cf0 nodeCheck.containsAll(
\f0\b \cf4 nodeMap
\f1\b0 \cf0 .values()) : 
\f0\b \cf3 "\cf2 \\n\cf3  node Check [" 
\f1\b0 \cf0 + nodeCheck.toString() + 
\f0\b \cf3 "] \cf2 \\n\cf3  nodeMap  [" 
\f1\b0 \cf0 + 
\f0\b \cf4 nodeMap
\f1\b0 \cf0 .values().toString() + 
\f0\b \cf3 "]" 
\f1\b0 \cf0 ;\
    
\f0\b \cf2 assert 
\f1\b0 \cf0 edgeCheck.containsAll((
\f0\b \cf4 edgeList
\f1\b0 \cf0 )) : 
\f0\b \cf3 "\cf2 \\n\cf3  edgeCheck [" 
\f1\b0 \cf0 + edgeCheck.toString() + 
\f0\b \cf3 "] \cf2 \\n\cf3  edgeList [" 
\f1\b0 \cf0 + 
\f0\b \cf4 edgeList
\f1\b0 \cf0 .toString() + 
\f0\b \cf3 "]"
\f1\b0 \cf0 ;\cb1 \
    \
    
\f0\b \cf2 return 
\f1\b0 \cf0 edgeSequence;\
\}\
}